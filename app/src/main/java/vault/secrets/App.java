/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package vault.secrets;

import io.github.jopenlibs.vault.Vault;
import io.github.jopenlibs.vault.VaultException;
import io.github.jopenlibs.vault.json.JsonObject;
import io.github.jopenlibs.vault.VaultConfig;
import io.github.jopenlibs.vault.SslConfig;
import io.github.jopenlibs.vault.json.JsonValue;
import io.github.jopenlibs.vault.response.AuthResponse;
import io.github.jopenlibs.vault.response.LogicalResponse;
import io.github.jopenlibs.vault.response.UnwrapResponse;

import java.util.Map;

public class App {

    public static String ROLE_ID = "role_id";
    public static String SECRET_ID = "secret_id";

    public static String wrappedToken = "<put_wrapped_token_here>";

    public static void main(String[] args) throws VaultException {

        Vault vault = getVault("http://127.0.0.1:8200");
        String clientToken = login(vault, wrappedToken);

        String password = read(vault, "secret/my-role/jdbc", "password");
        System.out.println(password);
    }

    /**
     * Get a Vault client.
     *
     * @param vaultUrl vault url
     * @return vault client
     * @throws VaultException
     */
    public static Vault getVault(String vaultUrl) throws VaultException {
        final VaultConfig config =
                new VaultConfig()
                        .address(vaultUrl)
                        .sslConfig(new SslConfig().build())
                        .build();
        return Vault.create(config);
    }

    /**
     * Log in to Vault using the wrapped token.
     *
     * @param vault        vault
     * @param wrappedToken wrapped token
     * @return client token
     * @throws VaultException
     */
    public static String login(Vault vault, String wrappedToken) throws VaultException {
        UnwrapResponse unwrapped = vault.sys().wrapping().unwrap(wrappedToken);
        JsonObject json = unwrapped.getData();

        JsonValue jsonRole = json.get(ROLE_ID);
        if (jsonRole == null) {
            throw new VaultException("No role found in wrapped token");
        }
        String role = jsonRole.asString();

        JsonValue jsonSecret = json.get(SECRET_ID);
        if (jsonSecret == null) {
            throw new VaultException("No secret found in wrapped token");
        }
        String secret = jsonSecret.asString();

        AuthResponse authResponse = vault.auth().loginByAppRole(role, secret);
        return authResponse.getAuthClientToken();
    }

    /**
     * Read a value by key from Vault.
     *
     * @param vault vault
     * @param path  path to the Vault secret
     * @param key   key in the secret
     * @return value corresponding to the key
     * @throws VaultException
     */
    public static String read(Vault vault, String path, String key) throws VaultException {
        LogicalResponse response = vault.logical().read(path);
        int status = response.getRestResponse().getStatus();
        if (status != 200) {
            String msg = "Vault read by path '%s' failed with status code '%d'".formatted(path, status);
            throw new VaultException(msg);
        }
        Map<String, String> data = response.getData();
        if (data == null) {
            String msg = "Vault read by path '%s' failed with null data".formatted(path);
            throw new VaultException(msg);
        }
        return data.get(key);
    }
}
